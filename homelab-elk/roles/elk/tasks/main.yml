- name: Elasticsearch
  debug:
    msg: "Elasticsearch"

- name: create elk network
  docker_network:
    name: elastic

- name: run elasticsearch container
  docker_container:
    name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:{{ elk_version }}
    volumes:
      - "data:/usr/share/elasticsearch/data"
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - name: elastic
    env:
      discovery.type: "single-node"
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"

- name: run logstash continer
  docker_container:
    name: logstash
    image: docker.elastic.co/logstash/logstash:{{ elk_version }}
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    volumes:
      - "{{ role_path }}/files/logstash/pipeline:/usr/share/logstash/pipeline"
    env:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - name: elastic

- name: run kibana container
  docker_container:
    name: kibana
    image: docker.elastic.co/kibana/kibana:{{ elk_version }}
    ports:
      - "5601:5601"
    volumes:
      - "{{ role_path }}/files/kibana/config:/usr/share/kibana/config"
    networks:
      - name: elastic

#- name: wait until kibana is up
  #wait_for:
    #host: "http://kibana.home.lab:5601/status"
    #state: 200
    #curl -s  -o  /dev/null -w "%{http_code}" http://kibana.home.lab:5601/status

#- name: create kibana index
#  shell: | 
#            curl -XPOST -D- 'http://kibana.home.lab:5601/api/saved_objects/index-pattern' \
#              -H 'Content-Type: application/json' \
#              -H 'kbn-version: {{elk_version }}' \
#              -d '{"attributes":{"title":"logstash-*","timeFieldName":"@timestamp"}}'
